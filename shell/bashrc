# return early if not interactive shell!
# for some reason my vim !commands have been calling my bashprompt
# should probably put just the interactive stuff in here; there's some useful
# things in bashrc for all scripts
if ! [[ $- == *i* ]]; then
  return
fi

# lol
# TODO: add to brewfile
if ! { [ -z $(command -v cowsay) ] && [ -z $(command -v fortune) ] && [ -z $(command -v lolcat) ]; }; then 
  # fortune | cowsay -f stegosaurus | lolcat
  fortune | cowsay -f tux | lolcat
fi

# source private dotfile (only if it exists)
if [ -f ~/.bashprivate ]; then
   source ~/.bashprivate
fi

# source git completion 
# should really have kept this *.bash
# also with the install and link scripts
if [ -f ~/.git-completion ]; then 
  source ~/.git-completion
fi

# source bash prompt
source ~/.bashprompt

export CLICOLOR=1

# ls aliases
# Thanks: https://superuser.com/questions/183876/how-do-i-get-ls-color-auto-to-work-on-mac-os-x
ls --color=auto &> /dev/null && alias ls='ls --color=auto' || # alias ls='ls -GFh'
alias l='ls'
alias la='ls -A'
alias list='ls -lA'

# cd aliases
alias ~='cd ~'
alias c='cd'
alias up='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias back='cd -'
alias down='cd $(git rev-parse --show-toplevel)' # cd to current git project root
cl() { cd "$@" && ls; } # cd and ls

# bookmarks
alias dotfiles='cd ~/dotfiles'
alias projects='cd ~/Projects'

# Disable rm, which is very dangerous!
# Always prefer "trash", or safely rm with "remove"
alias remove='/bin/rm -irv'
alias rm='echo rm is disabled! Use the commands \"trash\" or \"remove\".'

# force interactive cp and mv
alias cp='cp -i'
alias mv='mv -i'

# handy dandy
alias remake='make clean && make'
alias python='python3'
# alias pip='pip3' # disabled since this was messing with conda's pip; so it was using my pip3 (3.7) instead of the conda pip (3.6)
alias activate='source venv/bin/activate'
alias venv='python3 -m venv'
alias notebook='jupyter notebook'
alias source-bashrc='source ~/.bashrc' # technically you should just use `exec bash`
# One catch for sourcing again is that if I have some var set to var="a"$var in the bashrc then it will append it again
alias matlab="/Applications/MATLAB_R2019b.app/bin/matlab -nodesktop -nojvm -nosplash"

# may want to run: eval `/usr/libexec/path_helper -s`
# since macos has additional path info in /etc/paths and paths.d

# tmux
alias tm='tmux'
alias tma='tmux attach -t'
alias tmk='tmux kill-session -t'
alias tm-killall='tmux kill-server'
# alias tls='tmux list-sessions'
alias tms='tmux new-session -s'

# make directory and switch into it
# https://unix.stackexchange.com/questions/9123/is-there-a-one-liner-that-allows-me-to-create-a-directory-and-move-into-it-at-th
mkcd () {
  case "$1" in
    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
    /*) mkdir -p "$1" && cd "$1";;
    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
    *) mkdir -p "./$1" && cd "./$1";;
  esac
}

pandoc-pdf() {
  pandoc $1 --pdf-engine=pdflatex -o $2
}

# Deletes all vim swap files and .DS_Store
# TODO: put the clean into a list
alias tidy='find . \( -name ".*.sw?" -or -name ".swp" -or -name ".DS_Store" \) -delete -print'

# Prevent Ctrl-S and Ctrl-Q from hanging terminal
# https://unix.stackexchange.com/questions/72086/ctrl-s-hang-terminal-emulator
stty -ixon

# Use vim as default editor
# https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits
export VISUAL=vim
export EDITOR="$VISUAL"

# set -o vi
# bind '"jk":vi-movement-mode'

# Enable ``conda activate``
# https://github.com/conda/conda/blob/master/CHANGELOG.md#440-2017-12-20
# . ~/miniconda3/etc/profile.d/conda.sh
[ -f '~/miniconda3/etc/profile.d/conda.sh' ] && source ~/miniconda3/etc/profile.d/conda.sh
# conda activate base
# I don't conda activate base because env should be by directory
# Use direnv!

# Enable direnv if installed
[ -x "$(command -v direnv)" ] && eval "$(direnv hook bash)"

# - Add timestamp to bash_history
#   https://askubuntu.com/questions/391082/how-to-see-time-stamps-in-bash-history
# - Increase max bash_history file size, change location, ignore commands prepended with space (prepare for backup)
# https://unix.stackexchange.com/questions/107851/using-export-in-bashrc
# TODO: the timestamps aren't formatted nicely in the bash_history file
# Parsing the timestamp hash: https://stackoverflow.com/questions/10665396/converting-the-hash-tag-timestamps-in-history-file-to-desired-string
# One idea is to manually append to a separate log file like in: https://spin.atomicobject.com/2016/05/28/log-bash-history/ (I don't like this solution)
# But I would use "history 1" instead of manually constructing the datetime
# and keep ~./bash_history for history cmd use 
# I think that current way is fine, but will need to be parsed by above
# HISTTIMEFORMAT="%FT%T  " # ISO datetime followed by two spaces 
# HISTSIZE=90000
# PROMPT_COMMAND overrides this (tagged with date)
# HISTFILE=~/.logs/bash-history # don't use quotes (won't expand the ~)
# HISTCONTROL=ignorespace

# Append history to history file after command (default is after session ends)
# https://sanctum.geek.nz/arabesque/better-bash-history/
# shopt -s histappend # hopefully this is what we want? not sure what it does since we have history -a in the prompt_command
# shopt -s cmdhist
# PROMPT_COMMAND="if [ \"$(id -u)\" -ne 0 ]; then history -a; fi; HISTFILE=~/.logs/bash-history-\"$(date '+%F')\"; $PROMPT_COMMAND" # only append to history if not root

# Clear history and load history file into history list
# TODO: fix this!!
# history -c
# history -r ~/.logs/bash-history-"$(date '+%F')"

# Backup bash history
# UNUSED
# source ~/.backup_bash_history
# backup_bash_history $HISTFILE
# Advantage of this would be that current bash-history isn't emptied every month
