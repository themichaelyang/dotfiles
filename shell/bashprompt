# Adapted from https://github.com/paulirish/dotfiles

# Text styles
# tput is better than escape codes!
# TODO: Check if tput is supported
# TODO: move to local vars!
BOLD=$(tput bold)
RESET=$(tput sgr0)
BSET=${RESET}${BOLD}

# 8/16 color
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)

# 256 color
RED256=$(tput setaf 124)
PINK256=$(tput setaf 209)
ORANGE256=$(tput setaf 214)
YELLOW256=$(tput setaf 221)
PURPLE256=$(tput setaf 162)
CYAN256=$(tput setaf 37)
LAVENDER256=$(tput setaf 111)
BLUE256=$(tput setaf 69)

# Git prompt
function prompt_git {
    local dirty_indicator="*"

    local branch_color=$1
    local indicator_color=$2

    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    local branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    # check if it's dirty (slow)
    # technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
    # dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "$dirty_indicator")
    dirty=$([[ -z $(git status -s) ]] || echo -e "$dirty_indicator")

    echo -e "${BSET}on ${branch_color}${branch_name}${indicator_color}${dirty}";

    return
}

# Bash Prompt
function bash_prompt {
    local newline="\n"
    local prompt_symbol="$"

    # When calling functions in bash prompt, \ needed
    # in front of $(), otherwise will just evaluate
    # once and will not update.
    PS1="\[${BOLD}\]"

    # Set window title to working directory (\w)
    PS1+="\[\033]0;\w\007\]"

    # Check if ssh
    if [[ $SSH_CONNECTION ]]; then
        PS1+="\[${BLUE256}\][ssh] "
    fi

    # Ruby version
    PS1+='$(if [[ $RUBY_VERSION ]]; then echo "\[${BLUE256}\](ruby $RUBY_VERSION) "; fi)'

    # Show Conda env: single quotes for reload (TODO: update all to single quote)
    # https://stackoverflow.com/a/5380026/7971276
    # No if statement b/c this fn is only executed once. The prompt is only
    # executed once!
    # PS1+='\[${BLUE256}\]$CONDA_PROMPT_MODIFIER'
    # conda config --set changeps1 False
    PS1+='$(if [[ $CONDA_DEFAULT_ENV ]]; then echo "\[${BLUE256}\]($CONDA_DEFAULT_ENV) "; fi)'

    # Check if vim subshell
    if [[ $VIM ]]; then
        PS1+="\[${BLUE256}\][vim] "
    fi

    # User (\u)
    PS1+="\[${ORANGE256}\]\u "

    # Only show hostname (\H) if SSH
    if [[ $SSH_CLIENT ]]; then
        PS1+="\[${BSET}\]at \[${PINK256}\]\H "
    fi
    # PS1+="\[${BSET}\]at \[${PINK256}\]\H " 
    # \H only sets hostname once
    # PS1+="\[${BSET}\]at \[${PINK256}\]$(hostname) "
    
    # Working directory (\w)
    PS1+="\[${BSET}\]in \[${YELLOW256}\]\w\[${BSET}\] "

    # Git
    PS1+="\$(prompt_git \"\[$PURPLE256\]\" \"\[$LAVENDER256\]\") "

    # Prompt symbol
    PS1+="\[${newline}\]"
    PS1+="\[${BSET}\]\[${prompt_symbol}\] \[${RESET}\]"
}

# Basic bash prompt
function basic_bash_prompt {
  PS1='\u @ \H: \w\n$ '
  # PS1="\n\w$ "
  # PS1="\w$ "
}

# Set bash prompt
bash_prompt
# basic_bash_prompt

# Remove function
unset bash_prompt
